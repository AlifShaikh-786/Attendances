================Git Commands ==================
git status
git add .
git status
git commit -m " "
git push 


==================================Frontend=================================

1-- npm create vite@latest Frontend
2-- npm install -D tailwindcss@^3 postcss autoprefixer
3-- npx tailwindcss init -p   
4-- npm install react-router-dom
5-- npm install @react-oauth/google




npm run dev -- --host 0.0.0.0



=================================Backend==================================
1--  npm init -y
2--  npm i dotenv express body-parser dotenv cors mongoose
3--  npm i --save-dev nodemon


in package ,json =(
      "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",

    "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
)










3. Use SSD Mobilenet Descriptors for Student DB

When storing studentsâ€™ face embeddings in DB, generate them with SSD Mobilenet (not Tiny).

Example preprocessing for DB images:

const img = await faceapi.fetchImage(student.imageUrl);
const detections = await faceapi
  .detectSingleFace(img, new faceapi.SsdMobilenetv1Options({ minConfidence: 0.7 }))
  .withFaceLandmarks()
  .withFaceDescriptor();

if (detections) {
  return new Float32Array(detections.descriptor);
}


ðŸ‘‰ This ensures high-quality reference descriptors in DB.

4. Stricter Matching Threshold
const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors, 0.4);


0.6 = default â†’ loose, many false matches.

0.4 = strict â†’ >95% accuracy in controlled conditions.

5. Support Multiple Face Samples per Student
const createLabeledDescriptors = () =>
  students.map(student => {
    const descriptors = student.faceDescriptors.map(
      desc => new Float32Array(desc)
    );
    return new faceapi.LabeledFaceDescriptors(student._id, descriptors);
  });


ðŸ‘‰ Store at least 3â€“5 embeddings per student (different angles & lighting).