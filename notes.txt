================Git Commands ==================
git status
git add .
git status
git commit -m " "
git push 


==================================Frontend=================================

1-- npm create vite@latest Frontend
2-- npm install -D tailwindcss@^3 postcss autoprefixer
3-- npx tailwindcss init -p   
4-- npm install react-router-dom
5-- npm install @react-oauth/google
6-- npm install nodemailer




npm run dev -- --host 0.0.0.0



=================================Backend==================================
1--  npm init -y
2--  npm i dotenv express body-parser dotenv cors mongoose
3--  npm i --save-dev nodemon
4--  import xlsx from "xlsx";









in package ,json =(
      "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",

    "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
)










3. Use SSD Mobilenet Descriptors for Student DB

When storing students‚Äô face embeddings in DB, generate them with SSD Mobilenet (not Tiny).

Example preprocessing for DB images:

const img = await faceapi.fetchImage(student.imageUrl);
const detections = await faceapi
  .detectSingleFace(img, new faceapi.SsdMobilenetv1Options({ minConfidence: 0.7 }))
  .withFaceLandmarks()
  .withFaceDescriptor();

if (detections) {
  return new Float32Array(detections.descriptor);
}


üëâ This ensures high-quality reference descriptors in DB.

4. Stricter Matching Threshold
const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors, 0.4);


0.6 = default ‚Üí loose, many false matches.

0.4 = strict ‚Üí >95% accuracy in controlled conditions.

5. Support Multiple Face Samples per Student
const createLabeledDescriptors = () =>
  students.map(student => {
    const descriptors = student.faceDescriptors.map(
      desc => new Float32Array(desc)
    );
    return new faceapi.LabeledFaceDescriptors(student._id, descriptors);
  });


üëâ Store at least 3‚Äì5 embeddings per student (different angles & lighting).















// import React, { useState, useEffect, useRef, useMemo } from "react";
// import * as faceapi from "@vladmandic/face-api";

// const StdAttendance = () => {
//   const [formdata, setFormData] = useState({
//     Class: "",
//     semester: "",
//     div: "",
//     batch: "",
//     Subject: "",
//     Time: "",
//     date: "",
//     facultyId_id: "",
//     department: "",
//   });

//   const [students, setStudents] = useState([]);
//   const [attendance, setAttendance] = useState({});
//   const [useIPCam, setUseIPCam] = useState(false);
//   const [ipCamUrl, setIpCamUrl] = useState("http://192.168.43.1:8080/video");

//   const videoRef = useRef(null);
//   const canvasRef = useRef(null);

//   const MODEL_URL = "/models"; // ‚úÖ Download models and keep in public/models folder

//   // ----------------- Load face-api models -----------------
//   useEffect(() => {
//     const loadModels = async () => {
//       try {
//         await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);
//         await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);
//         await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);
//         await faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL);
//         console.log("‚úÖ Face-api models loaded");
//       } catch (err) {
//         console.error("Error loading models:", err);
//       }
//     };
//     loadModels();
//   }, []);

//   // ----------------- Load studentInfo from localStorage -----------------
//   useEffect(() => {
//     const studentInfo = JSON.parse(localStorage.getItem("studentInfo") || "{}");
//     if (studentInfo) {
//       setFormData((prev) => ({
//         ...prev,
//         department: studentInfo.department || "",
//         facultyId_id: studentInfo.facultyId_id || "",
//       }));
//     }
//   }, []);

//   const handleChange = (e) =>
//     setFormData({ ...formdata, [e.target.name]: e.target.value });

//   const isValidTime = (time) => {
//     if (!time) return false;
//     const [hours, minutes] = time.split(":").map(Number);
//     const input = new Date();
//     input.setHours(hours, minutes, 0);
//     const start = new Date();
//     start.setHours(9, 30, 0);
//     const end = new Date();
//     end.setHours(17, 0, 0);
//     return input >= start && input <= end;
//   };

//   const startVideo = () => {
//     navigator.mediaDevices
//       .getUserMedia({ video: {} })
//       .then((stream) => {
//         if (videoRef.current) videoRef.current.srcObject = stream;
//       })
//       .catch((err) => console.error("Webcam error:", err));
//   };

//   const startIPCam = () => {
//     if (videoRef.current) {
//       videoRef.current.srcObject = null;
//       videoRef.current.src = ipCamUrl;
//       videoRef.current.play();
//     }
//   };

//   useEffect(() => {
//     if (!students.length) return;
//     useIPCam ? startIPCam() : startVideo();
//   }, [useIPCam, ipCamUrl, students]);

//   // ----------------- Load students -----------------
//   const StdDetailSubmit = async (e) => {
//     e.preventDefault();

//     if (!isValidTime(formdata.Time)) {
//       alert("‚ùå Time must be between 9:30 AM and 5:00 PM");
//       return;
//     }

//     if (!formdata.Class || !formdata.semester || !formdata.div) {
//       alert("Please select Class, Semester, and Division");
//       return;
//     }

//     try {
//       let allStudents = [];

//       if (formdata.div === "AB") {
//         const divisions = ["A", "B"];
//         for (let div of divisions) {
//           const res = await fetch("http://localhost:7070/api/StdDisplays", {
//             method: "POST",
//             headers: { "Content-Type": "application/json" },
//             body: JSON.stringify({
//               Class: formdata.Class,
//               semester: formdata.semester,
//               div,
//             }),
//           });
//           const data = await res.json();
//           if (res.ok) allStudents = [...allStudents, ...data];
//         }
//       } else {
//         const res = await fetch("http://localhost:7070/api/StdDisplays", {
//           method: "POST",
//           headers: { "Content-Type": "application/json" },
//           body: JSON.stringify({
//             Class: formdata.Class,
//             semester: formdata.semester,
//             div: formdata.div,
//           }),
//         });
//         const data = await res.json();
//         if (res.ok) allStudents = data;
//       }

//       if (allStudents.length > 0) {
//         setStudents(allStudents);
//         const defaultAttendance = {};
//         allStudents.forEach((student) => {
//           defaultAttendance[student._id] = false;
//         });
//         setAttendance(defaultAttendance);
//       } else {
//         alert("No students found for selected criteria.");
//         setStudents([]);
//         setAttendance({});
//       }
//     } catch (error) {
//       alert("Server Error: " + error.message);
//     }
//   };

//   // ‚úÖ Prepare labeled descriptors once students are loaded
//   const labeledDescriptors = useMemo(() => {
//     if (!students.length) return [];
//     return students
//       .filter((s) => s.faceDescriptor && s.faceDescriptor.length)
//       .map(
//         (s) =>
//           new faceapi.LabeledFaceDescriptors(
//             s._id,
//             s.faceDescriptor.map((d) => new Float32Array(d))
//           )
//       );
//   }, [students]);

//   useEffect(() => {
//     if (!students.length || labeledDescriptors.length === 0) return;

//     const video = videoRef.current;
//     const canvas = canvasRef.current;
//     const displaySize = { width: 720, height: 560 };

//     const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors, 0.5);

//     const runDetection = async () => {
//       if (!video || video.paused || video.ended) return;

//       const detections = await faceapi
//         .detectAllFaces(
//           video,
//           new faceapi.TinyFaceDetectorOptions({
//             inputSize: 416,
//             scoreThreshold: 0.4,
//           })
//         )
//         .withFaceLandmarks()
//         .withFaceDescriptors();

//       const resized = faceapi.resizeResults(detections, displaySize);
//       const ctx = canvas.getContext("2d");
//       ctx.clearRect(0, 0, canvas.width, canvas.height);
//       faceapi.draw.drawDetections(canvas, resized);

//       resized.forEach((det) => {
//         const match = faceMatcher.findBestMatch(det.descriptor);
//         if (match.label !== "unknown") {
//           setAttendance((prev) => ({ ...prev, [match.label]: true }));
//         }
//       });

//       requestAnimationFrame(runDetection);
//     };

//     video.addEventListener("play", () => {
//       canvas.width = displaySize.width;
//       canvas.height = displaySize.height;
//       runDetection();
//     });
//   }, [labeledDescriptors, students]);

//   const handleSubmitAttendance = async () => {
//     if (!formdata.Subject || !formdata.Time || !formdata.date) {
//       alert("‚ùå Fill Subject, Time and Date before submitting.");
//       return;
//     }
//     if (!window.confirm("Are you sure you want to save attendance?")) return;

//     const attendanceList = students.map((s) => ({
//       ...formdata,
//       fName: s.fName,
//       mName: s.mName,
//       lName: s.lName,
//       rollNo_id: s.rollNo_id,
//       image: s.image?.[0] || "",
//       status: attendance[s._id] ? "Present" : "Absent",
//       reportType: "daily",
//     }));

//     try {
//       const res = await fetch("http://localhost:7070/api/AddAttendances", {
//         method: "POST",
//         headers: { "Content-Type": "application/json" },
//         body: JSON.stringify({ attendanceList }),
//       });
//       if (res.ok) alert("‚úÖ Attendance saved successfully!");
//       else alert("‚ùå Failed to save attendance");
//     } catch (err) {
//       alert("Error saving attendance: " + err.message);
//     }
//   };

//   const countPresent = Object.values(attendance).filter(Boolean).length;
//   const total = students.length;
//   const absent = total - countPresent;

//   return (
//     <div className="p-6 max-w-4xl mx-auto">
//       {/* Logo */}
//       <div className="flex gap-3 justify-center mt-6">
//         <img
//           src="/Assets/DYPIMED-Logo.png"
//           alt="Logo"
//           className="w-20 h-20 animate-bounce"
//         />
//         <h3 className="text-2xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-blue-600">
//           DYPIMED
//         </h3>
//       </div>

//       {/* Attendance Form */}
//       <form
//         onSubmit={StdDetailSubmit}
//         className="bg-white shadow-lg rounded-xl p-6 space-y-6 border border-gray-200 mt-6"
//       >
//         <h2 className="text-2xl font-bold text-gray-800 text-center">
//           üéØ Start Attendance
//         </h2>
//         <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
//           <select
//             name="Class"
//             value={formdata.Class}
//             onChange={handleChange}
//             required
//             className="border rounded-lg p-2"
//           >
//             <option value="">-- Select Class --</option>
//             <option value="MCA-II">MCA-II</option>
//             <option value="MCA-I">MCA-I</option>
//           </select>
//           <select
//             name="semester"
//             value={formdata.semester}
//             onChange={handleChange}
//             required
//             className="border rounded-lg p-2"
//           >
//             <option value="">-- Select Semester --</option>
//             <option value="I">I</option>
//             <option value="II">II</option>
//             <option value="III">III</option>
//             <option value="IV">IV</option>
//           </select>
//           <select
//             name="div"
//             value={formdata.div}
//             onChange={handleChange}
//             required
//             className="border rounded-lg p-2"
//           >
//             <option value="">-- Select Division --</option>
//             <option value="A">A</option>
//             <option value="B">B</option>
//             <option value="AB">A&B</option>
//           </select>
//           <input
//             type="text"
//             name="Subject"
//             placeholder="Subject"
//             value={formdata.Subject}
//             onChange={handleChange}
//             required
//             className="border rounded-lg p-2"
//           />
//           <input
//             type="time"
//             name="Time"
//             value={formdata.Time}
//             onChange={handleChange}
//             required
//             className="border rounded-lg p-2"
//           />
//           <input
//             type="date"
//             name="date"
//             value={formdata.date}
//             max={new Date().toISOString().split("T")[0]}
//             onChange={handleChange}
//             required
//             className="border rounded-lg p-2"
//           />
//         </div>
//         <button
//           type="submit"
//           className="bg-indigo-600 text-white px-6 py-2 rounded-lg mt-4"
//         >
//           üì∑ Load Students & Start Camera
//         </button>
//       </form>

//       {/* Camera & Attendance */}
//       {students.length > 0 && (
//         <div className="mt-6">
//           {/* Camera Section */}
//           <div className="relative w-[720px] h-[560px] mx-auto border-4 border-gray-300 rounded-lg overflow-hidden">
//             <div className="flex gap-4 mb-4">
//               <button
//                 onClick={() => setUseIPCam(false)}
//                 className="px-4 py-2 bg-blue-500 text-white rounded"
//               >
//                 PC Webcam
//               </button>
//               <button
//                 onClick={() => setUseIPCam(true)}
//                 className="px-4 py-2 bg-green-500 text-white rounded"
//               >
//                 Mobile IP Cam
//               </button>
//             </div>
//             {useIPCam && (
//               <input
//                 type="text"
//                 value={ipCamUrl}
//                 onChange={(e) => setIpCamUrl(e.target.value)}
//                 placeholder="http://192.168.xx.xx:8080/video"
//                 className="border p-2 mb-4 w-full max-w-md"
//               />
//             )}
//             <video
//               ref={videoRef}
//               autoPlay
//               muted
//               playsInline
//               className="w-full h-auto rounded-lg shadow-lg"
//             />
//             <canvas
//               ref={canvasRef}
//               width="720"
//               height="560"
//               className="absolute inset-0"
//             />
//           </div>

//           {/* Attendance List */}
//           <div className="mt-6 bg-gray-50 p-4 rounded-lg shadow-md text-center">
//             <p>
//               ‚úÖ Present: <span className="text-green-600">{countPresent}</span>{" "}
//               / Total: <span className="text-blue-600">{total}</span> | ‚ùå
//               Absent: <span className="text-red-600">{absent}</span>
//             </p>
//             <ul className="max-h-64 overflow-y-auto border p-2 rounded mt-4">
//               {students.map((s) => (
//                 <li key={s._id} className="flex items-center space-x-2 py-1">
//                   <input
//                     type="checkbox"
//                     checked={!!attendance[s._id]}
//                     onChange={(e) =>
//                       setAttendance((prev) => ({
//                         ...prev,
//                         [s._id]: e.target.checked,
//                       }))
//                     }
//                   />
//                   <span>
//                     {[s.fName, s.mName, s.lName].filter(Boolean).join(" ")} (
//                     {s.rollNo_id})
//                   </span>
//                 </li>
//               ))}
//             </ul>
//             <button
//               onClick={handleSubmitAttendance}
//               className="mt-4 bg-green-500 text-white px-6 py-2 rounded-lg"
//             >
//               üì© Submit Attendance
//             </button>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default StdAttendance;

import React, { useState, useEffect, useRef } from "react";
import * as faceapi from "@vladmandic/face-api";

const StdAttendance = () => {
  const [formdata, setFormData] = useState({
    Class: "",
    semester: "",
    div: "",
    batch: "",
    Subject: "",
    Time: "",
    date: "",
  });

  const [students, setStudents] = useState([]);
  const [attendance, setAttendance] = useState({});
  const [message, setMessage] = useState("");

  const videoRef = useRef(null);
  const canvasRef = useRef(null);

  const MODEL_URL = "https://justadudewhohacks.github.io/face-api.js/models/";

  // Load face-api models once
  useEffect(() => {
    const loadModels = async () => {
      await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);
      await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);
      await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);
      console.log("‚úÖ Models loaded from CDN");
    };
    loadModels();
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formdata, [e.target.name]: e.target.value });
  };

  const isValidTime = (inputTime) => {
    if (!inputTime) return false;
    const [hours, minutes] = inputTime.split(":").map(Number);
    if (isNaN(hours) || isNaN(minutes)) return false;
    const input = new Date();
    input.setHours(hours, minutes, 0);
    const start = new Date();
    start.setHours(9, 30, 0);
    const end = new Date();
    end.setHours(17, 0, 0);
    return input >= start && input <= end;
  };

  const startVideo = () => {
    navigator.mediaDevices
      .getUserMedia({ video: {} })
      .then((stream) => {
        if (videoRef.current) videoRef.current.srcObject = stream;
      })
      .catch((err) => console.error("Webcam error:", err));
  };

  const StdDetailSubmit = async (e) => {
    e.preventDefault();

    if (!isValidTime(formdata.Time)) {
      alert("‚ùå Time must be between 9:30 AM and 5:00 PM");
      return;
    }

    if (!formdata.Class || !formdata.semester || !formdata.div) {
      alert("Please select Class, Semester, and Division");
      return;
    }

    try {
      let allStudents = [];

      if (formdata.div === "AB") {
        // ‚úÖ Fetch for Division A
        const resA = await fetch("http://localhost:7070/api/StdDisplays", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            Class: formdata.Class,
            semester: formdata.semester,
            batch: formdata.batch,
            div: "A",
          }),
        });
        const dataA = await resA.json();
        if (resA.ok) {
          allStudents = [...allStudents, ...dataA];
        }

        // ‚úÖ Fetch for Division B
        const resB = await fetch("http://localhost:7070/api/StdDisplays", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            Class: formdata.Class,
            semester: formdata.semester,
            batch: formdata.batch,
            div: "B",
          }),
        });
        const dataB = await resB.json();
        if (resB.ok) {
          allStudents = [...allStudents, ...dataB];
        }
      } else {
        // ‚úÖ Single Division fetch
        const res = await fetch("http://localhost:7070/api/StdDisplays", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            Class: formdata.Class,
            semester: formdata.semester,
            batch: formdata.batch,
            div: formdata.div,
          }),
        });
        const data = await res.json();
        if (res.ok) {
          allStudents = data;
        } else {
          alert("Student Details Not Found: " + (data?.msg || "Unknown Error"));
        }
      }

      if (allStudents.length > 0) {
        setStudents(allStudents);
        const defaultAttendance = {};
        allStudents.forEach((student) => {
          defaultAttendance[student._id] = false;
        });
        setAttendance(defaultAttendance);
        startVideo();
      } else {
        alert("No students found for selected criteria.");
        setStudents([]);
        setAttendance({});
      }
    } catch (error) {
      alert("Server Error: " + error.message);
      console.error("Error:", error);
    }
  };

  const createLabeledDescriptors = () =>
    students.map((student) => {
      const descriptors = student.faceDescriptor.map(
        (desc) => new Float32Array(desc)
      );
      return new faceapi.LabeledFaceDescriptors(student._id, descriptors);
    });

  useEffect(() => {
    if (students.length === 0) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const labeledDescriptors = createLabeledDescriptors();
    const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors, 0.6);
    const displaySize = { width: 720, height: 560 };
    faceapi.matchDimensions(canvas, displaySize);

    let intervalId;

    const onPlay = () => {
      intervalId = setInterval(async () => {
        if (video.paused || video.ended) return;

        const detections = await faceapi
          .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
          .withFaceLandmarks()
          .withFaceDescriptors();

        const resizedDetections = faceapi.resizeResults(
          detections,
          displaySize
        );
        const ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        faceapi.draw.drawDetections(canvas, resizedDetections);
        faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);

        resizedDetections.forEach((detection) => {
          const bestMatch = faceMatcher.findBestMatch(detection.descriptor);
          const { x, y } = detection.detection.box;

          if (bestMatch.label !== "unknown") {
            setAttendance((prev) => ({ ...prev, [bestMatch.label]: true }));
            const name =
              students.find((s) => s._id === bestMatch.label)?.fName ||
              "Unknown";
            ctx.fillStyle = "rgba(0,255,0,0.6)";
            ctx.fillRect(x, y - 20, ctx.measureText(name).width + 10, 20);
            ctx.fillStyle = "black";
            ctx.fillText(name, x + 5, y - 5);
          } else {
            ctx.fillStyle = "rgba(255,0,0,0.6)";
            ctx.fillRect(
              x,
              y - 20,
              ctx.measureText("Not in list").width + 10,
              20
            );
            ctx.fillStyle = "white";
            ctx.fillText("Not in list", x + 5, y - 5);
          }
        });
      }, 1000);
    };

    video.addEventListener("play", onPlay);
    return () => {
      video.removeEventListener("play", onPlay);
      clearInterval(intervalId);
    };
  }, [students]);

  const getStudentName = (id) => {
    const student = students.find((s) => s._id === id);
    return student ? student.stdName : "Unknown";
  };

  const handleSubmitAttendance = async () => {
    if (!formdata.Subject || !formdata.Time || !formdata.date) {
      alert("Please fill Subject, Time and Date before submitting attendance.");
      return;
    }

    if (!window.confirm("Are you sure you want to save attendance?")) return;

    const attendanceList = students.map((student) => ({
      Class: formdata.Class,
      semester: formdata.semester,
      batch: formdata.batch,
      div: formdata.div,
      image: student.image?.[0] || "",
      fName: student.fName,
      mName: student.mName,
      lName: student.lName,
      date: formdata.date,
      Time: formdata.Time,
      rollNo_id: student.rollNo_id,
      status: attendance[student._id] ? "Present" : "Absent",
      Subject: formdata.Subject,
    }));

    try {
      const response = await fetch("http://localhost:7070/api/AddAttendances", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ attendanceList }),
      });

      if (response.ok) alert("‚úÖ Attendance saved successfully!");
      else {
        const errorData = await response.json();
        alert(
          "Failed to save attendance: " + (errorData?.msg || "Unknown error")
        );
      }
    } catch (err) {
      alert("Error submitting attendance: " + err.message);
    }
  };

  const countPresent = Object.values(attendance).filter(Boolean).length;
  const total = students.length;
  const absent = total - countPresent;

  return (
    <div className="p-6 max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex gap-3 justify-center mt-6">
        <img
          src="/Assets/DYPIMED-Logo.png"
          alt="DYPIMED Logo"
          className="w-20 h-20 animate-bounce"
        />
        <h3 className="text-transparent bg-clip-text bg-gradient-to-r from-pink-500 via-purple-600 to-blue-600 font-extrabold text-2xl md:text-3xl select-none drop-shadow-[0_0_6px_rgba(236,72,153,0.8)]">
          DYPIMED
        </h3>
      </div>

      {/* Attendance Form */}
      <form
        onSubmit={StdDetailSubmit}
        className="bg-white shadow-lg rounded-xl p-6 space-y-6 border border-gray-200"
      >
        <h2 className="text-2xl font-bold text-gray-800 text-center">
          üéØ Start Attendance
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <select
            name="batch"
            value={formdata.batch}
            onChange={handleChange}
            required
          >
            <option value="">-- Select Batch --</option>
            <option value="2024-2026">2024-2026</option>
            <option value="2025-2027">2025-2027</option>
          </select>
          <select
            name="Class"
            value={formdata.Class}
            onChange={handleChange}
            required
            className="border rounded-lg p-2 focus:ring-2 focus:ring-indigo-400"
          >
            <option value="">-- Select Class --</option>
            <option value="MCA-II">MCA-II</option>
            <option value="MCA-I">MCA-I</option>
          </select>
          <select
            name="semester"
            value={formdata.semester}
            onChange={handleChange}
            required
            className="border rounded-lg p-2 focus:ring-2 focus:ring-indigo-400"
          >
            <option value="">-- Select Semester --</option>
            <option value="I">I</option>
            <option value="II">II</option>
            <option value="III">III</option>
            <option value="IV">IV</option>
          </select>
          <select
            name="div"
            value={formdata.div}
            onChange={handleChange}
            required
            className="border rounded-lg p-2 focus:ring-2 focus:ring-indigo-400"
          >
            <option value="">-- Select Division --</option>
            <option value="A">A</option>
            <option value="B">B</option>
            <option value="AB">A&B</option>
          </select>
          <input
            type="text"
            placeholder="Subject"
            name="Subject"
            value={formdata.Subject}
            onChange={handleChange}
            required
            className="border rounded-lg p-2 focus:ring-2 focus:ring-indigo-400"
          />
          <input
            type="time"
            name="Time"
            value={formdata.Time}
            onChange={handleChange}
            required
            className="border rounded-lg p-2 focus:ring-2 focus:ring-indigo-400"
          />
          <input
            type="date"
            name="date"
            value={formdata.date}
            onChange={handleChange}
            max={new Date().toISOString().split("T")[0]}
            required
            className="border rounded-lg p-2 focus:ring-2 focus:ring-indigo-400"
          />
        </div>
        <div className="flex justify-center">
          <button
            type="submit"
            className="bg-indigo-600 text-white px-6 py-2 rounded-lg shadow-md hover:bg-indigo-700 transition"
          >
            üì∑ Load Students & Start Camera
          </button>
        </div>
      </form>

      {/* Camera & Attendance */}
      {students.length > 0 && (
        <>
          <div className="relative w-[720px] h-[560px] mx-auto mt-6 border-4 border-gray-300 rounded-lg overflow-hidden shadow-lg">
            <video
              ref={videoRef}
              width="720"
              height="560"
              autoPlay
              muted
              className="absolute inset-0"
            />
            <canvas
              ref={canvasRef}
              width="720"
              height="560"
              className="absolute inset-0"
            />
          </div>

          {message && (
            <div className="mt-4 text-center font-semibold text-lg text-green-600">
              {message}
            </div>
          )}

          <div className="mt-6 bg-gray-50 p-4 rounded-lg shadow-md text-center">
            <p className="text-gray-800 font-medium">
              ‚úÖ Present: <span className="text-green-600">{countPresent}</span>{" "}
              / Total: <span className="text-blue-600">{total}</span> | ‚ùå
              Absent: <span className="text-red-600">{absent}</span>
            </p>
            <ul className="max-h-64 overflow-y-auto border p-2 rounded">
              {students.map((student) => (
                <li
                  key={student._id}
                  className="flex items-center space-x-2 py-1"
                >
                  <input
                    type="checkbox"
                    checked={!!attendance[student._id]}
                    onChange={(e) =>
                      setAttendance((prev) => ({
                        ...prev,
                        [student._id]: e.target.checked,
                      }))
                    }
                    id={`attend_${student._id}`}
                  />
                  <label htmlFor={`attend_${student._id}`}>
                    <span>
                      {[student.fName, student.mName, student.lName]
                        .filter(Boolean)
                        .join(" ")}{" "}
                      ({student.rollNo_id})
                    </span>
                  </label>
                </li>
              ))}
            </ul>
            <button
              onClick={handleSubmitAttendance}
              className="mt-4 bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition"
            >
              üì© Submit Attendance
            </button>
          </div>
        </>
      )}
    </div>
  );
};

export default StdAttendance;